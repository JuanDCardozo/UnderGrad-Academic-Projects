//-----------------------------------------------------------------------------
// SimulationStub.java
//-----------------------------------------------------------------------------

import java.io.*;
import java.util.Scanner;

public class Simulation{

//-----------------------------------------------------------------------------
//
// The following function may be of use in assembling the initial backup and/or
// storage queues.  You may use it as is, alter it as you see fit, or delete it
// altogether.
//
//-----------------------------------------------------------------------------

   public static Job getJob(Scanner in) {
      String[] s = in.nextLine().split(" ");
      int a = Integer.parseInt(s[0]);
      int d = Integer.parseInt(s[1]);
      return new Job(a, d);
   }

//-----------------------------------------------------------------------------
//
// The following stub for function main contains a possible algorithm for this
// project.  Follow it if you like.  Note that there are no instructions below
// which mention writing to either of the output files.  You must intersperse
// those commands as necessary.
//
//-----------------------------------------------------------------------------

   public static void main(String[] args) throws IOException{
	   int time = 0;
	   int arrival = 0;
	   int duration = 0;
	   
	  //1.  check command line arguments
	  if(args.length != 1){
	     System.out.println("Usage: Simulation input_file");
	     System.exit(1);
	  }
	
	  //2.  open files for reading and writing
	  Scanner in =  new Scanner(new File(args[0]));
	  PrintWriter trace = new PrintWriter(args[0]+".trc");
	  PrintWriter report = new PrintWriter(args[0]+".rpt");
	 
	  
	  //3.  read in m jobs from input file
	  //Get number of jobs to perform
	  int m_jobs = in.nextInt();
	  System.Out.println(m_jobs);
	  
	  //Get the max number of processors
	  int m_Processors = m_jobs-1;
	  
	  //Get Job array
	  Object[2] unprocessed_Job;
	  
	  // Create the Jobs
	  for(int i = 0; m_jobs > i; i++){
		  unprocessed_Job[i] = getJob(in);
		  toString(unprocessed_Job[i]);
	   }

	  /*
	//4.  run simulation with n processors for n=1 to n=m-1      
	for(int n_Processors = 1; n_Processors <= m_Processors ; n_Processors++){
		
		//5. declare and initialize an array of n processor Queues and any necessary storage Queues
		
		//Storage Queue
		Object Storage_Queue = new Queue();
		
		// Fill the storage queue with jobs to be processed
		for(int i = 0; m_jobs > i; i++){
			Storage_Queue.enqueue(unprocessed_Job[i]);
		}
	     
	     
	     // Create n number of Processors
		for(int i = n_Processors; i > 0,i--){
			Object Processor[n_Processors] = new Queue();
		}
		
		//    6.      while unprocessed jobs remain  {
			      while(!Storage_Queue.isEmpty()){
			    	  	    	 time++;
			//    7.          determine the time of the next arrival or finish event and 
			//                update time
			    	  for(int i = n_Processors; i > 0,i--){
			    		Processor[n_Processors].computeFinishTime();
			  			if(Processor[n_Processors].getFinish() == time){
			  				Storage_Queue.enqueue(Processor[n_Processors].dequeue);
			  			}else{ 
				  			 Job next = Storage_Queue_In.peek();
					    	 arrival = next.getArrival();
					    	 duration = next.getDuration();			
			  			}
			  		}
			    	  
			    	
			    	 
			//    8.          complete all processes finishing now
			    	 
			
			//    9.          if there are any jobs arriving now, assign them to a processor 
			//                Queue of minimum length and with lowest index in the queue array.
			    	  for(int i = 0; i < n_Processors,i++){
			    		  if(Processor[i].isEmpty){
			    			  Processor[i].enqueue(Storage_Queue.dequeue());
			    		  }
			  		}
			
			//    10.     } end while-loop
			      }
			      time = 0;
		//    11.     compute the total wait, maximum wait, and average wait for 
		//            all Jobs, then reset finish times
	
		//    12. } end for-loop
	      }
	
	*/
      
//    13. close input and output files
      in.close();
      trace.close();
      report.close();

   }
}

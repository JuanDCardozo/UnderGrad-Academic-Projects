/** ***************************************************************************
* Name: Juan D. Cardozo
* Student I.D: 1362585
* CRUZ I.D: jcardozo
* Class: CMPS 12B
* Section: Mondays 6-8
* Date: 05/23/2015
* Simulation.java
*
*****************************************************************************/
import java.io.*;
import java.util.Scanner;

public class Simulation{

//-----------------------------------------------------------------------------
//
// The following function may be of use in assembling the initial backup and/or
// storage queues.  You may use it as is, alter it as you see fit, or delete it
// altogether.
//
//-----------------------------------------------------------------------------

   public static Job getJob(Scanner in) {
      String[] s = in.nextLine().split(" ");
      int a = Integer.parseInt(s[0]);
      int d = Integer.parseInt(s[1]);
      return new Job(a, d);
   }

//-----------------------------------------------------------------------------
//
// The following stub for function main contains a possible algorithm for this
// project.  Follow it if you like.  Note that there are no instructions below
// which mention writing to either of the output files.  You must intersperse
// those commands as necessary.
//
//-----------------------------------------------------------------------------

   public static void main(String[] args) throws IOException{
	   int time = 0;
	   int arrival = 0;
	   int finish  = 0;
	   
	   // if set to true, will run simulation with one processor
	   boolean testSim1 = true;

	   // if set to true, will run simulation with two processors
	   boolean testSim2 = false;

	   // if set to true, will run simulation from n to m-1 processors
	   boolean simulation = false;
	   
	  //1.  check command line arguments
	  if(args.length != 1){
	     System.out.println("Usage: Simulation input_file");
	     System.exit(1);
	  }
	
	  //2.  open files for reading and writing
	  Scanner in =  new Scanner(new File(args[0]));
	  PrintWriter trace = new PrintWriter(args[0]+".trc");
	  PrintWriter report = new PrintWriter(args[0]+".rpt");
	 
	  
	  //3.  read in m jobs from input file
	  //Get number of jobs to perform
	  String s = in.nextLine();
	  int totalJobs = Integer.parseInt(s);
	 	  
	  //Get the max number of processors
	  int maxProcessors = totalJobs-1;
	  
	  // Storage Queue
	  Queue  storage = new Queue();

	  // Create the Jobs
	  for(int i = 0; totalJobs > i; i++){
	      storage.enqueue( getJob(in));
	   }
	  report.println("Report File: "+(args[0])+".rpt");
	  report.println(totalJobs+"Jobs:");
	  report.println(storage);
	  report.println("*******************************************");
	  report.println("*******************************************");
	  if(testSim1){
	      trace.println("Trace File: "+(args[0])+".trc");
	      trace.println(totalJobs+ "Jobs: ");
	      trace.println(storage);
	      trace.println("**********************");
	      trace.println("1 Processor");
	      trace.println("**********************");
	      Queue processorSim1 = new Queue();
	      Job unprocessed = (Job) storage.peek();
	      Job processed = new Job(0,0);
	      while( (unprocessed.getFinish() == -1)){ 
		   unprocessed =(Job) storage.peek();
     		   if(time == unprocessed.getArrival()){
		      processorSim1.enqueue(storage.dequeue());
		   }
		   if(!processorSim1.isEmpty()){
		       processed = (Job) processorSim1.peek();
		       if((processed.getFinish()) == time){
			   storage.enqueue(processed);
			   processorSim1.dequeue();
					   }else{
			       processed = (Job) processorSim1.peek();
			       processed.computeFinishTime(time);
			   }
		       if((processed.getFinish()) == -1){
			   processed.computeFinishTime(time);
		       }

		       }// processor sim empty if
		   trace.println("Time="+time);
		   trace.println("0:"+storage);
		   trace.println("1:"+processorSim1);
		   trace.println("");
		   unprocessed = (Job) storage.peek();
      		   arrival = unprocessed.getArrival();
		   finish = 0;//processed.getFinish();
		   if(arrival > finish){
		       time = unprocessed.getArrival();
		   }else{
		       time = (processed.getFinish() == -1)? time: processed.getFinish();
		   }
	      }//end of big while
	      

    while(!processorSim1.isEmpty()){
      	if((processed.getFinish()) == -1){
	    processed.computeFinishTime(time);
     	}else if((processed.getFinish()) == time){
	    storage.enqueue(processed);
	    processorSim1.dequeue();


	}
	trace.println("Time="+time);
      	trace.println("0:"+storage);
	trace.println("1:"+processorSim1);
	trace.println("");
	if(!processorSim1.isEmpty()){
	 processed = (Job) processorSim1.peek();
	 // time = processed.getFinish();
	}
	time = processed.getFinish();
    }
    report.println("1 processor: totalWait= " + time+",maxWait= "+totalJobs+",averageWait= "+(time/totalJobs));
} // end of testSimulation1

	  // if true, runs simulation with two processors
	  if(testSim2){
	      System.out.println("Simulation with 2 processors does not exist");
	  }

	  // if true, runs simlation from n to m-1 processors
	  if(simulation){
	      System.out.println("Simulation from n to m-1 processors does not exist");
	  }


//    13. close input and output files
      in.close();
      trace.close();
      report.close();

   }
}

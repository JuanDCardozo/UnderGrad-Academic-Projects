Terminals unused in grammar

   TOK_BOOL
   TOK_FALSE
   TOK_TRUE
   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_NEWSTRING
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_DECLID
   TOK_INDEX
   TOK_RETURNVOID
   TOK_VARDECL


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program stmt
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    9          | TOK_STRUCT TOK_IDENT stmts '}'

   10 stmts: '{' fielddecl ';'
   11      | stmts fielddecl ';'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_INT
   16         | TOK_STRING
   17         | TOK_CHAR
   18         | TOK_IDENT

   19 function: identdecl '(' ')' ';'
   20         | identdecl '(' ')' block
   21         | identdecl params ')' ';'
   22         | identdecl params ')' block

   23 params: '(' identdecl
   24       | params ',' identdecl

   25 identdecl: basetype TOK_ARRAY TOK_IDENT
   26          | basetype TOK_IDENT

   27 block: '{' '}'
   28      | body '}'

   29 body: '{' stmt
   30     | body stmt

   31 stmt: block
   32     | vardecl
   33     | while
   34     | ifelse
   35     | return
   36     | expr ';'
   37     | ';'

   38 vardecl: identdecl '=' expr ';'

   39 while: TOK_WHILE '(' expr ')' stmt

   40 ifelse: TOK_IF '(' expr ')' stmt
   41       | TOK_IF '(' expr ')' stmt TOK_ELSE stmt

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN expr ';'

   44 expr: expr '=' expr
   45     | expr TOK_EQ expr
   46     | expr TOK_NE expr
   47     | expr TOK_LT expr
   48     | expr TOK_LE expr
   49     | expr TOK_GT expr
   50     | expr TOK_GE expr
   51     | expr '+' expr
   52     | expr '-' expr
   53     | expr '*' expr
   54     | expr '/' expr
   55     | expr '%' expr
   56     | '+' expr
   57     | '-' expr
   58     | '!' expr
   59     | allocator
   60     | call
   61     | variable
   62     | constant
   63     | '(' expr ')'

   64 allocator: TOK_NEW TOK_IDENT '(' ')'
   65          | TOK_NEW TOK_STRING '(' expr ')'
   66          | TOK_NEW basetype '[' expr ']'

   67 call: TOK_IDENT '(' ')'
   68     | exprs ')'

   69 exprs: TOK_IDENT '(' expr
   70      | exprs ',' expr

   71 variable: TOK_IDENT
   72         | expr '[' expr ']'
   73         | expr '.' TOK_IDENT

   74 constant: TOK_INTCON
   75         | TOK_CHARCON
   76         | TOK_STRINGCON
   77         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 58
'%' (37) 55
'(' (40) 19 20 23 39 40 41 63 64 65 67 69
')' (41) 19 20 21 22 39 40 41 63 64 65 67 68
'*' (42) 53
'+' (43) 51 56
',' (44) 24 70
'-' (45) 52 57
'.' (46) 73
'/' (47) 54
';' (59) 6 10 11 19 21 36 37 38 42 43
'=' (61) 38 44
'[' (91) 66 72
']' (93) 66 72
'{' (123) 8 10 27 29
'}' (125) 5 8 9 27 28
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 17
TOK_INT (260) 15
TOK_STRING (261) 16 65
TOK_BOOL (262)
TOK_IF (263) 40 41
TOK_ELSE (264) 41
TOK_WHILE (265) 39
TOK_RETURN (266) 42 43
TOK_STRUCT (267) 8 9
TOK_NULL (268) 77
TOK_NEW (269) 64 65 66
TOK_ARRAY (270) 12 25
TOK_FALSE (271)
TOK_TRUE (272)
TOK_EQ (273) 45
TOK_NE (274) 46
TOK_LT (275) 47
TOK_LE (276) 48
TOK_GT (277) 49
TOK_GE (278) 50
TOK_IDENT (279) 8 9 12 13 18 25 26 64 67 69 71 73
TOK_INTCON (280) 74
TOK_CHARCON (281) 75
TOK_STRINGCON (282) 76
TOK_BLOCK (283)
TOK_CALL (284)
TOK_IFELSE (285)
TOK_INITDECL (286)
TOK_POS (287)
TOK_NEG (288)
TOK_NEWARRAY (289)
TOK_TYPEID (290)
TOK_FIELD (291)
TOK_ORD (292)
TOK_CHR (293)
TOK_ROOT (294)
TOK_NEWSTRING (295)
TOK_FUNCTION (296)
TOK_PARAMLIST (297)
TOK_PROTOTYPE (298)
TOK_DECLID (299)
TOK_INDEX (300)
TOK_RETURNVOID (301)
TOK_VARDECL (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
start (65)
    on left: 1, on right: 0
program (66)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (67)
    on left: 8 9, on right: 2
stmts (68)
    on left: 10 11, on right: 9 11
fielddecl (69)
    on left: 12 13, on right: 10 11
basetype (70)
    on left: 14 15 16 17 18, on right: 12 13 25 26 66
function (71)
    on left: 19 20 21 22, on right: 3
params (72)
    on left: 23 24, on right: 21 22 24
identdecl (73)
    on left: 25 26, on right: 19 20 21 22 23 24 38
block (74)
    on left: 27 28, on right: 20 22 31
body (75)
    on left: 29 30, on right: 28 30
stmt (76)
    on left: 31 32 33 34 35 36 37, on right: 4 29 30 39 40 41
vardecl (77)
    on left: 38, on right: 32
while (78)
    on left: 39, on right: 33
ifelse (79)
    on left: 40 41, on right: 34
return (80)
    on left: 42 43, on right: 35
expr (81)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63, on right: 36 38 39 40 41 43 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 63 65 66 69 70 72 73
allocator (82)
    on left: 64 65 66, on right: 59
call (83)
    on left: 67 68, on right: 60
exprs (84)
    on left: 69 70, on right: 68 70
variable (85)
    on left: 71 72 73, on right: 61
constant (86)
    on left: 74 75 76 77, on right: 62


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . stmt
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    basetype   go to state 26
    function   go to state 27
    identdecl  go to state 28
    block      go to state 29
    body       go to state 30
    stmt       go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 42
    ';'  shift, and go to state 43


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   17 basetype: TOK_CHAR .

    $default  reduce using rule 17 (basetype)


State 7

   15 basetype: TOK_INT .

    $default  reduce using rule 15 (basetype)


State 8

   16 basetype: TOK_STRING .

    $default  reduce using rule 16 (basetype)


State 9

   40 ifelse: TOK_IF . '(' expr ')' stmt
   41       | TOK_IF . '(' expr ')' stmt TOK_ELSE stmt

    '('  shift, and go to state 44


State 10

   39 while: TOK_WHILE . '(' expr ')' stmt

    '('  shift, and go to state 45


State 11

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 47

    expr       go to state 48
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 12

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    9          | TOK_STRUCT . TOK_IDENT stmts '}'

    TOK_IDENT  shift, and go to state 49


State 13

   77 constant: TOK_NULL .

    $default  reduce using rule 77 (constant)


State 14

   64 allocator: TOK_NEW . TOK_IDENT '(' ')'
   65          | TOK_NEW . TOK_STRING '(' expr ')'
   66          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 50
    TOK_IDENT   shift, and go to state 51

    basetype  go to state 52


State 15

   18 basetype: TOK_IDENT .
   67 call: TOK_IDENT . '(' ')'
   69 exprs: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 53

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 71 (variable)


State 16

   74 constant: TOK_INTCON .

    $default  reduce using rule 74 (constant)


State 17

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 18

   76 constant: TOK_STRINGCON .

    $default  reduce using rule 76 (constant)


State 19

   56 expr: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 54
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 20

   57 expr: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 55
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 21

   58 expr: '!' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 56
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 22

   63 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 57
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 23

   37 stmt: ';' .

    $default  reduce using rule 37 (stmt)


State 24

   27 block: '{' . '}'
   29 body: '{' . stmt

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 58
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 59
    block      go to state 29
    body       go to state 30
    stmt       go to state 60
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   25 identdecl: basetype . TOK_ARRAY TOK_IDENT
   26          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 61
    TOK_IDENT  shift, and go to state 62


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   19 function: identdecl . '(' ')' ';'
   20         | identdecl . '(' ')' block
   21         | identdecl . params ')' ';'
   22         | identdecl . params ')' block
   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 63
    '('  shift, and go to state 64

    params  go to state 65


State 29

   31 stmt: block .

    $default  reduce using rule 31 (stmt)


State 30

   28 block: body . '}'
   30 body: body . stmt

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    '}'            shift, and go to state 66
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 59
    block      go to state 29
    body       go to state 30
    stmt       go to state 67
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 31

    4 program: program stmt .

    $default  reduce using rule 4 (program)


State 32

   32 stmt: vardecl .

    $default  reduce using rule 32 (stmt)


State 33

   33 stmt: while .

    $default  reduce using rule 33 (stmt)


State 34

   34 stmt: ifelse .

    $default  reduce using rule 34 (stmt)


State 35

   35 stmt: return .

    $default  reduce using rule 35 (stmt)


State 36

   36 stmt: expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ';'     shift, and go to state 82


State 37

   59 expr: allocator .

    $default  reduce using rule 59 (expr)


State 38

   60 expr: call .

    $default  reduce using rule 60 (expr)


State 39

   68 call: exprs . ')'
   70 exprs: exprs . ',' expr

    ')'  shift, and go to state 83
    ','  shift, and go to state 84


State 40

   61 expr: variable .

    $default  reduce using rule 61 (expr)


State 41

   62 expr: constant .

    $default  reduce using rule 62 (expr)


State 42

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 43

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 44

   40 ifelse: TOK_IF '(' . expr ')' stmt
   41       | TOK_IF '(' . expr ')' stmt TOK_ELSE stmt

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 85
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 45

   39 while: TOK_WHILE '(' . expr ')' stmt

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 86
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 46

   67 call: TOK_IDENT . '(' ')'
   69 exprs: TOK_IDENT . '(' expr
   71 variable: TOK_IDENT .

    '('  shift, and go to state 53

    $default  reduce using rule 71 (variable)


State 47

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 48

   43 return: TOK_RETURN expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ';'     shift, and go to state 87


State 49

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    9          | TOK_STRUCT TOK_IDENT . stmts '}'

    '{'  shift, and go to state 88

    stmts  go to state 89


State 50

   16 basetype: TOK_STRING .
   65 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 90

    $default  reduce using rule 16 (basetype)


State 51

   18 basetype: TOK_IDENT .
   64 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 91

    $default  reduce using rule 18 (basetype)


State 52

   66 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 92


State 53

   67 call: TOK_IDENT '(' . ')'
   69 exprs: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 93

    expr       go to state 94
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 54

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | '+' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 56 (expr)


State 55

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   57     | '-' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 57 (expr)


State 56

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   58     | '!' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 58 (expr)


State 57

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   63     | '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ')'     shift, and go to state 95


State 58

   27 block: '{' '}' .

    $default  reduce using rule 27 (block)


State 59

   38 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 63


State 60

   29 body: '{' stmt .

    $default  reduce using rule 29 (body)


State 61

   25 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 96


State 62

   26 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 63

   38 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 97
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 64

   19 function: identdecl '(' . ')' ';'
   20         | identdecl '(' . ')' block
   23 params: '(' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    ')'         shift, and go to state 99

    basetype   go to state 26
    identdecl  go to state 100


State 65

   21 function: identdecl params . ')' ';'
   22         | identdecl params . ')' block
   24 params: params . ',' identdecl

    ')'  shift, and go to state 101
    ','  shift, and go to state 102


State 66

   28 block: body '}' .

    $default  reduce using rule 28 (block)


State 67

   30 body: body stmt .

    $default  reduce using rule 30 (body)


State 68

   45 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 103
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 69

   46 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 104
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 70

   47 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 105
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 71

   48 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 106
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 72

   49 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 107
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 73

   50 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 108
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 74

   44 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 109
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 75

   51 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 110
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 76

   52 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 111
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 77

   53 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 112
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 78

   54 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 113
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 79

   55 expr: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 114
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 80

   73 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 115


State 81

   72 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 116
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 82

   36 stmt: expr ';' .

    $default  reduce using rule 36 (stmt)


State 83

   68 call: exprs ')' .

    $default  reduce using rule 68 (call)


State 84

   70 exprs: exprs ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 117
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 85

   40 ifelse: TOK_IF '(' expr . ')' stmt
   41       | TOK_IF '(' expr . ')' stmt TOK_ELSE stmt
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ')'     shift, and go to state 118


State 86

   39 while: TOK_WHILE '(' expr . ')' stmt
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ')'     shift, and go to state 119


State 87

   43 return: TOK_RETURN expr ';' .

    $default  reduce using rule 43 (return)


State 88

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
   10 stmts: '{' . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    '}'         shift, and go to state 120

    fielddecl  go to state 121
    basetype   go to state 122


State 89

    9 structdef: TOK_STRUCT TOK_IDENT stmts . '}'
   11 stmts: stmts . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98
    '}'         shift, and go to state 123

    fielddecl  go to state 124
    basetype   go to state 122


State 90

   65 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 125
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 91

   64 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 126


State 92

   66 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 46
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22

    expr       go to state 127
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 93

   67 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 67 (call)


State 94

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   69 exprs: TOK_IDENT '(' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81

    $default  reduce using rule 69 (exprs)


State 95

   63 expr: '(' expr ')' .

    $default  reduce using rule 63 (expr)


State 96

   25 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 97

   38 vardecl: identdecl '=' expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ';'     shift, and go to state 128


State 98

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 99

   19 function: identdecl '(' ')' . ';'
   20         | identdecl '(' ')' . block

    ';'  shift, and go to state 129
    '{'  shift, and go to state 24

    block  go to state 130
    body   go to state 30


State 100

   23 params: '(' identdecl .

    $default  reduce using rule 23 (params)


State 101

   21 function: identdecl params ')' . ';'
   22         | identdecl params ')' . block

    ';'  shift, and go to state 131
    '{'  shift, and go to state 24

    block  go to state 132
    body   go to state 30


State 102

   24 params: params ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 98

    basetype   go to state 26
    identdecl  go to state 133


State 103

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   45     | expr TOK_EQ expr .
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 45 (expr)


State 104

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   46     | expr TOK_NE expr .
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 46 (expr)


State 105

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   47     | expr TOK_LT expr .
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 47 (expr)


State 106

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   48     | expr TOK_LE expr .
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 48 (expr)


State 107

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   49     | expr TOK_GT expr .
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 49 (expr)


State 108

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   50     | expr TOK_GE expr .
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 75
    '-'  shift, and go to state 76
    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 50 (expr)


State 109

   44 expr: expr . '=' expr
   44     | expr '=' expr .
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81

    $default  reduce using rule 44 (expr)


State 110

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   51     | expr '+' expr .
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 51 (expr)


State 111

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   52     | expr '-' expr .
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78
    '%'  shift, and go to state 79
    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 52 (expr)


State 112

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   53     | expr '*' expr .
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 53 (expr)


State 113

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   54     | expr '/' expr .
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 54 (expr)


State 114

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   55     | expr '%' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    '.'  shift, and go to state 80
    '['  shift, and go to state 81

    $default  reduce using rule 55 (expr)


State 115

   73 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 73 (variable)


State 116

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ']'     shift, and go to state 134


State 117

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   70 exprs: exprs ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81

    $default  reduce using rule 70 (exprs)


State 118

   40 ifelse: TOK_IF '(' expr ')' . stmt
   41       | TOK_IF '(' expr ')' . stmt TOK_ELSE stmt

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 59
    block      go to state 29
    body       go to state 30
    stmt       go to state 135
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 119

   39 while: TOK_WHILE '(' expr ')' . stmt

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 59
    block      go to state 29
    body       go to state 30
    stmt       go to state 136
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 120

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


State 121

   10 stmts: '{' fielddecl . ';'

    ';'  shift, and go to state 137


State 122

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 138
    TOK_IDENT  shift, and go to state 139


State 123

    9 structdef: TOK_STRUCT TOK_IDENT stmts '}' .

    $default  reduce using rule 9 (structdef)


State 124

   11 stmts: stmts fielddecl . ';'

    ';'  shift, and go to state 140


State 125

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   65 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ')'     shift, and go to state 141


State 126

   64 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 64 (allocator)


State 127

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . TOK_LT expr
   48     | expr . TOK_LE expr
   49     | expr . TOK_GT expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   66 allocator: TOK_NEW basetype '[' expr . ']'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 68
    TOK_NE  shift, and go to state 69
    TOK_LT  shift, and go to state 70
    TOK_LE  shift, and go to state 71
    TOK_GT  shift, and go to state 72
    TOK_GE  shift, and go to state 73
    '='     shift, and go to state 74
    '+'     shift, and go to state 75
    '-'     shift, and go to state 76
    '*'     shift, and go to state 77
    '/'     shift, and go to state 78
    '%'     shift, and go to state 79
    '.'     shift, and go to state 80
    '['     shift, and go to state 81
    ']'     shift, and go to state 142


State 128

   38 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 38 (vardecl)


State 129

   19 function: identdecl '(' ')' ';' .

    $default  reduce using rule 19 (function)


State 130

   20 function: identdecl '(' ')' block .

    $default  reduce using rule 20 (function)


State 131

   21 function: identdecl params ')' ';' .

    $default  reduce using rule 21 (function)


State 132

   22 function: identdecl params ')' block .

    $default  reduce using rule 22 (function)


State 133

   24 params: params ',' identdecl .

    $default  reduce using rule 24 (params)


State 134

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 135

   40 ifelse: TOK_IF '(' expr ')' stmt .
   41       | TOK_IF '(' expr ')' stmt . TOK_ELSE stmt

    TOK_ELSE  shift, and go to state 143

    $default  reduce using rule 40 (ifelse)


State 136

   39 while: TOK_WHILE '(' expr ')' stmt .

    $default  reduce using rule 39 (while)


State 137

   10 stmts: '{' fielddecl ';' .

    $default  reduce using rule 10 (stmts)


State 138

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 144


State 139

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 140

   11 stmts: stmts fielddecl ';' .

    $default  reduce using rule 11 (stmts)


State 141

   65 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (allocator)


State 142

   66 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 66 (allocator)


State 143

   41 ifelse: TOK_IF '(' expr ')' stmt TOK_ELSE . stmt

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    '+'            shift, and go to state 19
    '-'            shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24

    basetype   go to state 26
    identdecl  go to state 59
    block      go to state 29
    body       go to state 30
    stmt       go to state 145
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    exprs      go to state 39
    variable   go to state 40
    constant   go to state 41


State 144

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 145

   41 ifelse: TOK_IF '(' expr ')' stmt TOK_ELSE stmt .

    $default  reduce using rule 41 (ifelse)
